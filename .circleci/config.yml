version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ingv/shakemap4-web
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build_and_test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Configure project
          command: |
            sed \
              -e "s|SHAKEMAP_DATA_PATH=.*|SHAKEMAP_DATA_PATH=/home/circleci/project/data|" \
              -e "s|WORKSPACE_PUID=.*|WORKSPACE_PUID=$(id -u)|" \
              -e "s|WORKSPACE_PGID=.*|WORKSPACE_PGID=$(id -g)|" \
              ./Docker/env-example > ./Docker/.env
      - run:
          name: Build docker image
          command: |
            cd Docker 
            docker-compose up -d
      - run:
          name: Test dockers are up and running
          command: |
            cd Docker
            docker-compose ps 
      - run:
          name: Test to process one event
          command: |
            cd Docker
            docker-compose exec -T --user=laradock workspace bash -c '/usr/bin/python3 /var/www/updateEventList.py --eventid=39481424' 
      - run:
          name: Test web request
          command: |
            NGINX_HOST_HTTP_PORT=$(grep "NGINX_HOST_HTTP_PORT" Docker/.env | awk -F"=" '{print $2}' )
            wget -O /tmp/test.html "http://127.0.0.1:${NGINX_HOST_HTTP_PORT}"

  test_version_match:
    docker:
      - image: docker:18.06.0-ce
    steps:
      - checkout
      - run:
          command: |
            VERSION_PUBLICCODE=$( grep "softwareVersion:" publiccode.yml | awk '{print $2}' | sed -e 's/^[[:space:]]*//' )
            VERSION_JS_FILE=$( grep "softwareVersion" ./scripts/softwareVersion.js | awk -F"\"" '{print $2}' | awk -F":" '{print $2}' | sed -e 's/^[[:space:]]*//' )
            echo "VERSION_PUBLICCODE=${VERSION_PUBLICCODE}"
            echo "VERSION_JS_FILE=${VERSION_JS_FILE}"
            if [[ ${VERSION_PUBLICCODE} != ${VERSION_JS_FILE} ]]; then exit 1; fi;
            
  test-publiccode:
    executor: docker-publisher
    #docker:
    #  - image: docker:18.06.0-ce
    steps:
      - checkout
      - setup_remote_docker
      - run:
          # https://github.com/italia/publiccode-parser-go
          name: Validate publiccode file
          command: |
            echo "CIRCLE_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME"
            echo "CIRCLE_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME"
            ### CircleCI cannot mount folder: https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
            # create a dummy container which will hold a volume with config
            docker create -v /publiccode_folder --name myfolder alpine:3.4 /bin/true
            # copy a config file into this volume
            docker cp publiccode.yml myfolder:/publiccode_folder
            # start an application container using this volume
            docker run --rm --volumes-from myfolder italia/publiccode-parser-go --remote-base-url "https://raw.githubusercontent.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/master" publiccode_folder/publiccode.yml

#  test_publiccode:
#    docker:
#      - image: docker:18.06.0-ce 
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run: 
#          # https://github.com/italia/publiccode-parser-go
#          name: Validate publiccode file
#          command: |
#            ### CircleCI cannot mount folder: https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
#            # create a dummy container which will hold a volume with config
#            docker create -v /publiccode_folder --name myfolder alpine:3.4 /bin/true
#            # copy a config file into this volume
#            docker cp publiccode.yml myfolder:/publiccode_folder
#            # start an application container using this volume
#            docker run --rm --volumes-from myfolder italia/publiccode-parser-go publiccode_folder/publiccode.yml 
      
workflows:
  version: 2.1
  myWorkflow:
    jobs:
      - build_and_test
      - test_version_match
      - test-publiccode
